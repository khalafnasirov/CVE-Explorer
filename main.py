### Developed by Khalaf Nasirov
### Creative Commons License 2023

from tkinter import *
from event_manager import EventManager
import ReportGenerator
import DataValues as dv
from ExploitDbDownload import RunExploitDbSelenium
from ExploitDbDownload import DownloadAnyExploit
from PdfGenerator import ExportAsPdf
from ReportGenerator import CheckDataSource
from ChromeOperations import RunUrl

event_manager = EventManager()

root = Tk()
root.title("CVE Explorer")
root.geometry("900x1080")
root.iconbitmap("./Media/cve_icon.ico")

# Values
is_ex_buttons_created = False
insert_text_count = 0
src_btn = Button()
result_label = Label()
down_exploit = Button()
result_label = Label()
export_as_pdf_btn = Button()
#label_space = Label(root, text="", font=('calibre', 8))
label_space_0 = Label(root, text="", font=('calibre', 8))
label_space_1 = Label(root, text="", font=('calibre', 8))
label_space_2 = Label(root, text="", font=('calibre', 8))

def handle_link(status):
    if status:
        IsCVEAvailable(dv.header)
    else:
        ShowNoLink()
def handle_information(information):
    if information:
        ShowNoInformation()
    else:
        ShowResults()
def exploit_db_status_handle(status):
    ExploitDBPopMessage(status)
def chrome_not_installed_handle():
    msg = "Chrome has not installed on the system.\nIn order to search for Exploit DB, please install Chrome Browser"
    PopUpInfo(msg)
def pdf_exported_handle():
    PopUpOpenPDF()


event_manager.add_listener("handle_link_event", handle_link)
event_manager.add_listener("information_event", handle_information)
event_manager.add_listener("exploitdb_result_event", exploit_db_status_handle)
event_manager.add_listener("chrome_not_installed_event", chrome_not_installed_handle)
event_manager.add_listener("pdf_exported_event", pdf_exported_handle)

#event_manager.add_listener("exploitdb_event", exploit_db_handle)

text = Text()

text = Text(root, width=900, height=900)
text.tag_configure("header_font", font=("calibre", 12, "bold"))
text.tag_configure("content", font=("calibre", 12, "normal"))
text.tag_configure("link", foreground="blue", font=("calibre", 12, "normal", "underline"))

def PopUpOpenPDF():

    def OpenPdf():
        RunUrl(f"PDFExports/cve-{dv.input_cve}-report.pdf")
        popup.destroy()

    popup = Toplevel(root)
    popup.title("Info")

    label = Label(popup, text=f"PDF has exported SUCCESFULLY!")
    label.pack(anchor="w", padx=20, pady=(5, 0))

    # Create a frame to contain the buttons
    button_frame = Frame(popup)
    button_frame.pack(pady=10)

    open_pdf = Button(button_frame, text="Open it", command=OpenPdf)
    open_pdf.grid(row=0, column=0, padx=10)

    # Create the "Cancel" button
    cancel_button = Button(button_frame, text="Back", command=popup.destroy)
    cancel_button.grid(row=0, column=1, padx=10)

    # Center the popup window within the main window
    popup.geometry("+{}+{}".format(root.winfo_rootx() + 50, root.winfo_rooty() + 50))

def PopUpInfo(msg):
    popup = Toplevel(root)
    popup.title("Info")

    label = Label(popup, text=msg)
    label.pack(anchor="w", padx=20, pady=(5, 0))

    # Create a frame to contain the buttons
    button_frame = Frame(popup)
    button_frame.pack(pady=10)

    # Create the "Cancel" button
    cancel_button = Button(button_frame, text="OK", command=popup.destroy)
    cancel_button.grid(row=0, column=1, padx=10)

    # Center the popup window within the main window
    popup.geometry("+{}+{}".format(root.winfo_rootx() + 50, root.winfo_rooty() + 50))

def ExploitDBPopMessage(status):
    if status:
        def download_action():
            selected_indices = []

            # Find which checkbox is selected
            for i, var in enumerate(checkbox_vars):
                if var.get():
                    selected_indices.append(i)

            if selected_indices:
            # Print the second values of the selected checkboxes
                for index in selected_indices:
                    DownloadAnyExploit(dv.exploit_db_links[index][1])
            else:
                PopUpInfo("Please select an Exploit to download")
            
            popup.destroy()

        popup = Toplevel(root)
        popup.title("Exploit DB Results")

        label = Label(popup, text=f"Found Exploits ({dv.exploit_db_links.__len__()})")
        label.pack(anchor="w", padx=20, pady=(5, 0))

        # Create a list to store checkbox variables
        checkbox_vars = []

        # Create and display checkboxes with labels
        checklist = [f"Exploit {i+1}" for i in range(len(dv.exploit_db_links))]

        for item in dv.exploit_db_links:
            var = BooleanVar()
            checkbox_vars.append(var)
            checkbox = Checkbutton(popup, text=item[0], variable=var)
            checkbox.pack(anchor="w", padx=20, pady=(5, 0))

        # Create a frame to contain the buttons
        button_frame = Frame(popup)
        button_frame.pack(pady=10)

        # Create the "Download" button
        download_button = Button(button_frame, text="Download", command=download_action)
        download_button.grid(row=0, column=0, padx=10)

        # Create the "Cancel" button
        cancel_button = Button(button_frame, text="Cancel", command=popup.destroy)
        cancel_button.grid(row=0, column=1, padx=10)

        # Center the popup window within the main window
        popup.geometry("+{}+{}".format(root.winfo_rootx() + 50, root.winfo_rooty() + 50))
    else:
        popup = Toplevel(root)
        popup.title("Exploit DB Results")

        label = Label(popup, text=f"Nothing Exploit found!")
        label.pack(anchor="w", padx=20, pady=(5, 0))

        # Create a frame to contain the buttons
        button_frame = Frame(popup)
        button_frame.pack(pady=10)

        # Create the "Cancel" button
        ok_btn = Button(button_frame, text="OK", command=popup.destroy)
        ok_btn.grid(row=0, column=1, padx=10)

        # Center the popup window within the main window
        popup.geometry("+{}+{}".format(root.winfo_rootx() + 50, root.winfo_rooty() + 50))

def RemoveSearchResults():
    ReportGenerator.ResetAllDataValues()
    global insert_text_count, text
    insert_text_count = 0
    text.destroy()
    text = Text(root, width=900, height=900)
    text.tag_configure("header_font", font=("calibre", 12, "bold"))
    text.tag_configure("content", font=("calibre", 12, "normal"))
    text.tag_configure("link", foreground="blue", font=("calibre", 12, "normal", "underline"))
    RemoveExtraButtons()

def RemoveExtraButtons():
    global is_ex_buttons_created

    if is_ex_buttons_created:
        global down_exploit, result_label, export_as_pdf_btn
        down_exploit.destroy()
        result_label.destroy()
        export_as_pdf_btn.destroy()
        is_ex_buttons_created = False

def HitEnter(event):
    Search()

def Search():
    if dv.input_cve == cve_entry.get():
        return
    RemoveSearchResults()
    dv.input_cve = cve_entry.get()
    ReportGenerator.GenerateReport(dv.input_cve)
    
def InsertText(input, *conf_tag):
    global insert_text_count
    insert_text_count = insert_text_count + 1
    text.insert(INSERT, input)
    if conf_tag:
        text.tag_add(conf_tag, f"{insert_text_count}.0", f"{insert_text_count}.end")

def IsCVEAvailable(cve_header):
    if cve_header == "":
        dv.no_information = True
        event_manager.trigger_event("information_event", dv.no_information)
    else:
        dv.no_information = False
        event_manager.trigger_event("information_event", dv.no_information)


def RunExploit():
    RunExploitDbSelenium(dv.input_cve)

def DownloadExploit():
    if dv.is_exploitdb_searched:
        event_manager.trigger_event("exploitdb_result_event", dv.exploitdb_status)
    else:
        RunExploit()
        event_manager.trigger_event("exploitdb_result_event", dv.exploitdb_status)


def RunExportAsPdf():
    if dv.is_exploitdb_searched:
        ExportAsPdf()
    else:
        RunExploit()
        ExportAsPdf()

def ShowNoLink():
    InsertText("This link is not avaiable:\n", "header_font")
    InsertText(dv.running_url, "content")
    text.pack()

def ShowNoInformation():
    InsertText(f"No information about {dv.input_cve} CVE:\n", "header_font")
    InsertText("Please, use proper CVE", "content")
    text.pack()

def ShowResults():

    global down_exploit, result_label, export_as_pdf_btn, is_ex_buttons_created
    down_exploit = Button(root, text="Search Exploit DB", command=DownloadExploit, font=('calibre',10, 'bold'))
    export_as_pdf_btn = Button(root, text="Export as PDF", command=RunExportAsPdf, font=('calibre',10, 'bold'))
    result_label = Label(root, text=f"Results for {dv.running_url}", font=('calibre',14, 'bold'))
    
    result_label.pack(anchor="w")
    down_exploit.pack(anchor="w")
    export_as_pdf_btn.pack(anchor="w")
    is_ex_buttons_created = True
    
    # Header
    InsertText(f"Header:\n", "header_font")
    InsertText(f"{dv.header}\n", "content")
    InsertText("\n")
    # Base Score
    InsertText(f"Base Score:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.base_score)}\n", "content")
    InsertText("\n")
    # Vector
    InsertText(f"Vector:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.vector)}\n", "content")
    InsertText("\n")
    # Description
    InsertText(f"Description:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.description)}\n", "content")
    InsertText("\n")
    # Hyperlinks
    InsertText(f"Hyperlinks ({CheckDataSource(dv.hyperlinks).__len__()}):\n", "header_font")
    for link in dv.hyperlinks:
        InsertText(f"{link}\n", "link")
    # Nist name
    InsertText("\n")
    InsertText( f"NIST name:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.nist)}\n", "content")
    # CWE IDs
    if CheckDataSource(dv.cwe_names).__len__() != 0:
        InsertText("\n")
        InsertText(f"CWE-IDs ({CheckDataSource(dv.cwe_names).__len__()}):", "header_font")
        for cwe_id in dv.cwe_names:
            if cwe_id == "":
                continue
            InsertText(f"{cwe_id}", "content")
    # Nist name
    InsertText("\n")
    InsertText(f"Exploit Database Link:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.exploit_database_url)}\n", "link")

    text.pack()


### Search bar ###
# Label
label_space_0.pack()

label_text = StringVar()
label = Label(root, textvariable=label_text, font=('calibre',14, 'bold'))
label_text.set("Enter an CVE (Sample: 2014-1771)") 
label.pack()

label_space_1.pack()

# Entry 
cve_entry = Entry(root, bd=5, font=('calibre',12, 'bold'))
cve_entry.bind('<Return>', HitEnter)
cve_entry.pack()

label_space_2.pack()

# Button
src_btn = Button(root, text="Search", command=Search, font=('calibre',10, 'bold'))
src_btn.pack()

### Running application ###
root.mainloop()