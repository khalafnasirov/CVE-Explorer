### Developed Khalaf Nasirov
### Creative Commons License 2023

from tkinter import *
from event_manager import EventManager
import ReportGenerator
import DataValues as dv
from ExploitDbDownload import RunExploitDbSelenium

event_manager = EventManager()
root = Tk()

insert_text_count = 0


src_btn = Button()
result_label = Label()

root.geometry("900x1080")
cve_sample = "CVE-2017-0145"
def exploit_db_handle(exploit):
    message = ""
    if exploit:
        message = f"Exploit has succesfully downloaded to this path: {dv.download_path}"
        ShowDownloadInfo(message)
    else:
        message = f"There is no any exploit for this CVE"
        ShowDownloadInfo(message)

def handle_link(status):
    if status:
        IsCVEAvailable(dv.header)
    else:
        ShowNoLink()
def handle_information(information):
    if information:
        ShowNoInformation()
    else:
        ShowResults()


event_manager.add_listener("handle_link_event", handle_link)
event_manager.add_listener("information_event", handle_information)
event_manager.add_listener("exploitdb_event", exploit_db_handle)

text = Text(root, width=900, height=900)
text.tag_configure("header_font", font=("calibre", 12, "bold"))
text.tag_configure("content", font=("calibre", 12, "normal"))
text.tag_configure("link", foreground="blue", font=("calibre", 12, "normal", "underline"))

def RemoveSearchResults():
    ReportGenerator.ResetAllDataValues()
    global insert_text_count
    insert_text_count = 0
    
    if text:
        text.delete("1.0", "end")

def Search():
    RemoveSearchResults()
    cve_sample = cve_entry.get()
    dv.input_cve = cve_sample
    ReportGenerator.GenerateReport(cve_sample)
    
def InsertText(input, *conf_tag):
    global insert_text_count
    insert_text_count = insert_text_count + 1
    text.insert(INSERT, input)
    if conf_tag:
        text.tag_add(conf_tag, f"{insert_text_count}.0", f"{insert_text_count}.end")

def CheckDataSource(datasource):
    if datasource == "":
        datasource = "No Information"
        return datasource
    else:
        return datasource
def IsCVEAvailable(cve_header):
    if cve_header == "":
        dv.no_information = True
        event_manager.trigger_event("information_event", dv.no_information)
    else:
        dv.no_information = False
        event_manager.trigger_event("information_event", dv.no_information)

def ShowDownloadInfo(input):
    InsertText("\n")
    InsertText(f"Exploit DB downloading status:\n", "header_font")
    InsertText(f"{input}", "content")

def DownloadExploit():
    RunExploitDbSelenium(dv.input_cve)

down_exploit = Button(root, text="Download Exploit", command=DownloadExploit, font=('calibre',10, 'bold'))
result_label = Label(root, text=f"Results for {dv.running_url}", font=('calibre',14, 'bold'))
label_space = Label(root, text="", font=('calibre', 8))
label_space_0 = Label(root, text="", font=('calibre', 8))
label_space_1 = Label(root, text="", font=('calibre', 8))
label_space_2 = Label(root, text="", font=('calibre', 8))


def ShowNoLink():
    global down_exploit
    down_exploit.destroy()
    global label_space
    label_space.destroy()
    global result_label
    result_label.destroy()
    global text
    text.destroy()
    text = Text(root, width=900, height=900)
    InsertText("This link is not avaiable:\n", "header_font")
    InsertText(dv.running_url, "content")
    text.pack()

def ShowNoInformation():
    global down_exploit
    down_exploit.destroy()
    global label_space
    label_space.destroy()
    global result_label
    result_label.destroy()
    global text
    text.destroy()
    text = Text(root, width=900, height=900)
    InsertText(f"No information about {dv.input_cve} CVE:\n", "header_font")
    InsertText("Please, use proper CVE", "content")
    text.pack()

def ShowResults():

    result_label.pack(anchor="w")

    down_exploit.pack(anchor="w")
    
    label_space.pack()

    # Header
    InsertText(f"Header:\n", "header_font")
    InsertText(f"{dv.header}\n", "content")
    InsertText("\n")
    # Base Score
    InsertText(f"Base Score:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.base_score)}\n", "content")
    InsertText("\n")
    # Vector
    InsertText(f"Vector:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.vector)}\n", "content")
    InsertText("\n")
    # Description
    InsertText(f"Description:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.description)}\n", "content")
    InsertText("\n")
    # Hyperlinks
    InsertText(f"Hyperlinks ({CheckDataSource(dv.hyperlinks).__len__()}):\n", "header_font")
    for link in dv.hyperlinks:
        InsertText(f"{link}\n", "link")
    # Nist name
    InsertText("\n")
    InsertText( f"NIST name:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.nist)}\n", "content")
    # CWE IDs
    InsertText("\n")
    InsertText(f"CWE-IDs ({CheckDataSource(dv.cwe_names).__len__()}):", "header_font")
    for cwe_id in dv.cwe_names:
        InsertText(f"{cwe_id}", "content")
    # Nist name
    InsertText("\n")
    InsertText(f"Exploit Database Link:\n", "header_font")
    InsertText(f"{CheckDataSource(dv.exploit_database_url)}\n", "link")

    text.pack()


### Search bar ###
# Label
label_space_0.pack()

label_text = StringVar()
label = Label(root, textvariable=label_text, font=('calibre',14, 'bold'))
label_text.set("Enter an CVE (Sample: 2014-1771)") 
label.pack()

label_space_1.pack()

# Entry 
cve_entry = Entry(root, bd=5, font=('calibre',12, 'bold'))
cve_entry.pack()

label_space_2.pack()

# Button
src_btn = Button(root, text="Search", command=Search, font=('calibre',10, 'bold'))
src_btn.pack()

### Running application ###
root.mainloop()