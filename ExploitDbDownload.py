from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import sys, time, os
from event_manager import EventManager
import DataValues as dv

opts = Options()
event_manager = EventManager()

downloads_folder = os.path.join(os.path.expandvars("%USERPROFILE%"), "Downloads")

prefs = {
    'download.default_directory': downloads_folder,
    'download.prompt_for_download': False,
    'download.extensions_to_open': 'rb',
    'download.extensions_to_open': 'eml',
    'safebrowsing.enabled': True
}

opts.add_experimental_option('prefs', prefs)

def RunExploitDbSelenium(search_query):
    dv.download_path = downloads_folder
    chrome_user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36"
    opts.add_argument(f"user-agent={chrome_user_agent}")

    driver = webdriver.Chrome(options=opts)
    # agent = driver.execute_script("return navigator.userAgent")

    driver.get(f"https://www.exploit-db.com/search?cve={search_query}")

    wait = WebDriverWait(driver, 10)

    time.sleep(2)

    download_links = driver.find_elements(By.XPATH, '//table[@id="exploits-table"]/tbody//a[@href]')

    for link in download_links:
            href = link.get_attribute("href")
            if "download" in href:
                driver.get(href)
                dv.exploit_downloaded = True
                break

    if not dv.exploit_downloaded:
        event_manager.trigger_event("exploitdb_event", dv.exploit_downloaded)
    else:
        event_manager.trigger_event("exploitdb_event", dv.exploit_downloaded)

    time.sleep(3)
